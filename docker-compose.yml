version: '3.8'

services:

#######################################################################################################################
####################################################### AIRFLOW #######################################################
#######################################################################################################################

  postgres-airflow:
    image: postgres:15
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow_db
    ports:
      - "5433:5432"
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    networks:
      - airflow_network

  airflow-webserver:
    image: apache/airflow:2.7.2
    container_name: airflow-webserver
    depends_on:
      - postgres-airflow
    # Sets the necessary environment variables for a distributed processing setup using the CeleryExecutor
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow_db
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=redis://redis:6379/0
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__DEFAULT_USER_USERNAME=admin
      - AIRFLOW__WEBSERVER__DEFAULT_USER_PASSWORD=admin
    # Waits until the Airflow DB is initialized
    # Creates an Airflow user if it doesn't exist
    # Checks if the "dbt_conn" connection exists; otherwise, it creates it
    # Checks if the "postgres_dbt_conn" connection exists; otherwise, it creates it
    # Waits until the SSH keys are created in the "dbt" container
    # Sets proper permissions for the SSH keys
    # Starts the Airflow webserver
    command: >
      bash -c "
      until airflow db init; do echo 'Waiting for database...'; sleep 2; done &&
      airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin ||
      echo 'Airflow user already exists' &&
      if ! airflow connections get 'dbt_conn' > /dev/null 2>&1; then
        airflow connections add 'dbt_conn' --conn-type 'ssh' --conn-host 'dbt' --conn-login 'root' --conn-port '22' --conn-extra '{\"key_file\": \"/opt/airflow/dbt_ssh_keys/id_rsa\", \"POSTGRES_USER\": \"dbt\", \"POSTGRES_PASSWORD\": \"dbt\", \"DBLINK_HOST\": \"postgres-dbt\", \"DBLINK_DBNAME\": \"data_lake\", \"DBLINK_USER\": \"dbt\", \"DBLINK_PASSWORD\": \"dbt\"}' &&
        echo 'dbt_conn created'
      else
        echo 'dbt_conn already exists'
      fi &&
      if ! airflow connections get 'postgres_dbt_conn' > /dev/null 2>&1; then
        airflow connections add 'postgres_dbt_conn' --conn-type 'postgres' --conn-host 'postgres-dbt' --conn-schema 'data_lake' --conn-login 'dbt' --conn-password 'dbt' --conn-port '5432' &&
        echo 'postgres_dbt_conn created'
      else
        echo 'postgres_dbt_conn already exists'
      fi &&
      until [ -f /opt/airflow/dbt_ssh_keys/id_rsa ]; do
        echo 'Waiting for SSH keys to be created...';
        sleep 2;
      done &&
      echo 'SSH keys found, setting permissions...' &&
      chmod 600 /opt/airflow/dbt_ssh_keys/id_rsa &&
      airflow webserver
      "
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - dbt_ssh_keys:/opt/airflow/dbt_ssh_keys
    # Since the SSH keys created by the "dbt" container are stored in a volume located in the host machine, the containers need root access
    # This is not recommended in a production setting
    user: root
    networks:
      - airflow_network
      - link_airflow_dbt_network

  airflow-scheduler:
    image: apache/airflow:2.7.2
    container_name: airflow-scheduler
    depends_on:
      - postgres-airflow
      - airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow_db
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=redis://redis:6379/0
    # Waits until the Airflow DB is initialized
    # Starts the Airflow scheduler
    command: >
      bash -c "
        until airflow db init; do echo 'Waiting for database...'; sleep 2; done &&
        airflow scheduler
      "
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - dbt_ssh_keys:/opt/airflow/dbt_ssh_keys
    # Since the SSH keys created by the "dbt" container are stored in a volume located in the host machine, the containers need root access
    # This is not recommended in a production setting
    user: root
    networks:
      - airflow_network
      - link_airflow_dbt_network

  airflow-worker:
    image: apache/airflow:2.7.2
    depends_on:
      - postgres-airflow
      - airflow-scheduler
      - redis
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow_db
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CELERY__RESULT_BACKEND=redis://redis:6379/0
    # Waits until the Airflow DB is initialized
    # Starts the Airflow worker node
    command: >
      bash -c "
        until airflow db init; do echo 'Waiting for database...'; sleep 2; done &&
        airflow celery worker
      "
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - dbt_ssh_keys:/opt/airflow/dbt_ssh_keys
    # Since the SSH keys created by the "dbt" container are stored in a volume located in the host machine, the containers need root access
    # This is not recommended in a production setting
    user: root
    networks:
      - airflow_network
      - link_airflow_dbt_network
    # Deploys 3 worker nodes for better scalability and performance
    # Task distribution is handled by the scheduler node and Redis is used as a message broker
    deploy:
      replicas: 3

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
    - redis_data:/data
    networks:
      - airflow_network

#######################################################################################################################
####################################################### DBT ###########################################################
#######################################################################################################################

  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.9.0
    container_name: dbt
    depends_on:
      - postgres-dbt
    # All "DBLINK_<variable>" variables are used to connect to the "data_lake" database using a Postgres DBLINK extension
    environment:
      - DBT_PROFILES_DIR=/usr/app
      - POSTGRES_USER=dbt
      - POSTGRES_PASSWORD=dbt
      - DBLINK_HOST=postgres-dbt
      - DBLINK_DBNAME=data_lake
      - DBLINK_USER=dbt
      - DBLINK_PASSWORD=dbt
    volumes:
      - ./dbt:/usr/app
      - dbt_ssh_keys:/root/.ssh
    working_dir: /usr/app
    # Updates apt-get repositories and installs a SSH server
    # Generates SSH keys if they don't already exist
    # Adds the public key to authorized_keys
    # Configures SSH settings
    # Enables "AcceptEnv" so that the DAG's SSHOperator can pass the necessary environment variables to run dbt commands
    # Starts the SSH service
    entrypoint: >
      bash -c "
        apt-get update &&
        apt-get install -y openssh-server &&
        mkdir -p /root/.ssh &&
        if [ ! -f /root/.ssh/id_rsa ]; then
          echo 'Generating SSH keys...';
          ssh-keygen -t rsa -b 2048 -f /root/.ssh/id_rsa -N '';
        else
          echo 'SSH keys already exist.';
        fi &&
        cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys &&
        sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config &&
        sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config &&
        echo 'AcceptEnv *' >> /etc/ssh/sshd_config &&
        service ssh start &&
        tail -f /dev/null
      "
    ports: 
      - "2222:22"
    networks:
      - dbt_network
      - link_airflow_dbt_network
  
  postgres-dbt:
    image: postgres:15
    container_name: postgres-dbt
    environment:
      POSTGRES_USER: dbt
      POSTGRES_PASSWORD: dbt
      POSTGRES_DB: dbt_db
    ports:
      - "5434:5432"
    # Uses the "init_postgres_dbt.sql" file to set up the required database infrastructure
    volumes:
      - postgres_dbt_data:/var/lib/postgresql/data
      - ./postgres_config/init_postgres_dbt.sql:/docker-entrypoint-initdb.d/init_postgres_dbt.sql
    networks:
      - dbt_network
      - link_airflow_dbt_network

#######################################################################################################################
################################################ VOLUMES & NETWORKS ###################################################
#######################################################################################################################

volumes:
  postgres_airflow_data:
  postgres_dbt_data:
  redis_data:
  dbt_ssh_keys:

networks:
  airflow_network:
    driver: bridge
  dbt_network:
    driver: bridge
  link_airflow_dbt_network:
    driver: bridge